#!/usr/bin/env node

const { start, getInstance } = require('../')
const { getIdentifier } = require('ara-util')
const { info, error } = require('ara-console')
const { basename } = require('path')
const inquirer = require('inquirer')
const program = require('yargs')
const debug = require('debug')('afd')
const clip = require('cli-progress')
const rc = require('ara-runtime-configuration')()

const $0 = basename(process.argv[1])

process.title = $0
process.on('unhandledRejection', onfatal)
process.on('uncaughtExeption', onfatal)

// program usage
program
  .usage('usage: $0 [-hDV] <command> [options]')
  .wrap(null)

// booleans
program
  .group([ 'help', 'version', 'debug' ], 'General Options:')
  .option('debug', {
    type: 'boolean',
    alias: 'D',
    describe: 'Enable debug output'
  })
  .option('help', {
    alias: 'h',
    describe: 'Show this help message'
  })
  .option('version', {
    alias: 'V',
    describe: 'Show program version'
  })

// parameters
program
  .group([ 'identity', 'did' ], 'Command Options:')

program.option('identity', {
  alias: 'i',
  type: 'string',
  required: true,
  default: rc.network.identity.whoami,
  describe:
  `A valid, local, and resolvable Ara identity DID
  URI of the owner of the AFS. You will be
  prompted for the associated passphrase`,
})

program.option('did', {
  alias: 'd',
  type: 'string',
  describe:
  `A valid and resolvable Ara identity DID URI
  of an AFS.`,
})

program.command(
  'download',
  'Download AFS from network',
  // eslint-disable-next-line no-shadow
  program => program
    .usage('usage: $0 [-D] download [options]')
  , ondownload
)

program.command(
  'seed',
  'Host AFS for network',
  // eslint-disable-next-line no-shadow
  program => program
    .usage('usage: $0 [-D] seed [options]')
  , onseed
)

program.command(
  'metadata',
  'Sync metadata with the network',
  // eslint-disable-next-line no-shadow
  program => program
    .usage('usage: $0 [-D] metadata [options]')
  , onmetadata
)

program.command(
  'start',
  'Start the DCDN Node with the most recent configuration',
  // eslint-disable-next-line no-shadow
  program => program
    .usage('usage: $0 [-D] start [options]')
  , onstart
)

if (0 === program.argv._.length) {
  program.showHelp()
  process.exit(1)
}

if (program.argv.debug) {
  require('debug').enable('af*')
}

async function onstart(argv) {
  info('starting DCDN node')

  const password = await getPassword()

  try {
    await start({
      password,
      userID: argv.identity,
    })

    const dcdn = await getInstance()
    displayEvents(dcdn)
  } catch (e) {
    error('Error occurred with starting DCDN Node', e)
    process.exit(1)
  }
}

async function ondownload(argv) {
  const did = getIdentifier(argv.did || await getDid())

  info(`starting DCDN to download ${did}`)

  const password = await getPassword()

  const { maxCost } = await inquirer.prompt([ {
    type: 'input',
    name: 'maxCost',
    message:
    '\nPlease enter your max cost in Ara per download.\n' +
    'Price:'
  } ])

  const { maxPeers } = await inquirer.prompt([ {
    type: 'input',
    name: 'maxPeers',
    message:
    '\nPlease enter the maximum number of peers you want to hire.\n' +
    'Peers:'
  } ])

  try {
    await start({
      password,
      userID: argv.identity,
      did,
      download: true,
      upload: false,
      price: maxCost,
      maxPeers
    })

    const dcdn = await getInstance()
    displayEvents(dcdn)
  } catch (e) {
    error(`Error occurred while downloading ${did}`, e)
    process.exit(1)
  }
}

async function onseed(argv) {
  const did = getIdentifier(argv.did || await getDid())
  info(`starting DCDN to seed ${did}`)

  const password = await getPassword()

  const { farmingPrice } = await inquirer.prompt([ {
    type: 'input',
    name: 'farmingPrice',
    message:
    '\nPlease enter your price in Ara per upload.\n' +
    'Price:'
  } ])

  try {
    await start({
      password,
      userID: argv.identity,
      did,
      download: false,
      upload: true,
      price: farmingPrice,
    })
  } catch (e) {
    error(`Error occurred while seeding DID ${did}`, e)
    process.exit(1)
  }
}

async function onmetadata(argv) {
  const did = getIdentifier(argv.did || await getDid())
  info(`starting DCDN to sync metadata for ${did}`)

  try {
    await start({
      userID: argv.identity,
      did,
      download: true,
      upload: false,
      metaOnly: true
    })
  } catch (e) {
    error(`Error occurred while syncing metadata ${did}`, e)
    process.exit(1)
  }
}

async function getPassword() {
  const { password } = await inquirer.prompt([ {
    type: 'password',
    name: 'password',
    message:
    'Please enter the passphrase associated with the node identity.\n' +
    'Passphrase:'
  } ])
  return password
}

async function getDid() {
  const { did } = await inquirer.prompt([ {
    type: 'string',
    name: 'did',
    message:
    'Please enter the DID associated with the AFS.\n' +
    'DID:'
  } ])
  return did
}

function onfatal(err) {
  if (err) {
    debug(err)
    error('fatal:', err.message)
  }
  process.exit(1)
}


function displayEvents(dcdn) {
  // Creates a progress visualizer bar in cli
  const visualizers = new Map()
  dcdn.on('start', (did, total) => {
    if (visualizers.has(did)) return
    info(`Download started for ${did}`)
    const pBar = new clip.Bar({}, clip.Presets.shades_classic)
    pBar.start(total, 0)
    visualizers.set(did, pBar)
  })
  dcdn.on('progress', (did, value) => {
    if (!visualizers.has(did)) return
    const pBar = visualizers.get(did)
    pBar.update(value)
  })
  dcdn.on('complete', (did) => {
    if (!visualizers.has(did)) return
    const pBar = visualizers.get(did)
    pBar.stop()
    info(`Download complete for ${did}`)
    visualizers.delete(did)
  })

  dcdn.on('stop', (did) => {
    info(`Stopping services for ${did}`)
  })
  dcdn.on('failedArchiving', (data, message) => {
    error(`failed to initialize archive with ${data}: ${message}`)
  })
  dcdn.on('createAFS', (did) => {
    info(`initializing afs of did ${did}`)
  })
  dcdn.on('closeAFS'), () => {
    info('closing afs')
  }
  dcdn.on('failedUnjoining', (key) => {
    error(`failed to unjoin a swarm with key ${key}`)
  })
  dcdn.on('requestcomplete'), (key) => {
    info(`request complete for ${key}`)
  }
}
