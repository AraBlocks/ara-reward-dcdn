#!/usr/bin/env node

const { start: startDCDN } = require('../')
const { checkBlockchain } = require('ara-network-node-dcdn/blockchain')
const { createProgram } = require('../lib/program')
const { error, info } = require('ara-console')
const { resolve } = require('path')
const debug = require('debug')('afd:publish')
const rc = require('ara-runtime-configuration')()
const toLower = x => String(x).toLowerCase()

const inquirer = require('inquirer')

// yargs program command line interface instance
const program = createProgram({
  usage: `
usage: dcdn publish [-h] [--help]
                [options]
`,
})

const { argv } = program
  .option('h', {
    alias: 'help',
    describe: "Show this help message"
  })
  .option('d', {
    alias: 'did',
    type: 'string',
    describe: 'DID',
    required: true
  })
  .option('i', {
    alias: 'identity',
    type: 'string',
    describe: 'Identity',
    default: rc.network.identity.whoami,
    required: true
  })

// Emit program usage help
if ('undefined' == argv._[0] && argv.help) {
  program.showHelp()
  process.exit(0)
}

// Main program entry
module.exports = (async function main() {
  info(`Checking blockchain for ${argv.did}`)

  // Check if given DID is committed to blockchain
  const exists = await checkBlockchain(argv.did)

  if (exists) {
    info(`Found ${argv.did} on blockchain, starting DCDN`)

    let { pass } = await inquirer.prompt([ {
      type: 'password',
      name: 'pass',
      message:
      'Please enter the passphrase associated with the node identity.\n' +
      'Passphrase:'
    } ])

    let { farmingPrice } = await inquirer.prompt([ {
      type: 'input',
      name: 'farmingPrice',
      message:
      '\nPlease enter your price.\n' +
      'Price:'
    } ])

    try {
      await startDCDN({
        did: argv.did,
        download: false,
        upload: true,
        userID: argv.identity,
        price: farmingPrice
      })

    } catch (e) {
      error(`Error occurred while publishing DID ${argv.did}`, e)
      return process.exit(1)
    }
  } else {
    error(`${argv.did} doesn't seem to exist. Try running \`afs commit ${argv.did}`)
    return process.exit(1)
  }
}())
