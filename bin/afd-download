#!/usr/bin/env node

const { start: startDCDN, getInstance } = require('../')
const { createProgram } = require('../lib/program')
const { checkBlockchain } = require('ara-network-node-dcdn/blockchain')
const { info, error } = require('ara-console')
const rc = require('ara-runtime-configuration')()
const debug = require('debug')('afd:download')
const toLower = x => String(x).toLowerCase()
const inquirer = require('inquirer')
const clip = require('cli-progress')

// yargs program command line interface instance
const program = createProgram({
  usage: `
usage: dcdn download: [-h] [--help]
                 [options]
`,
})

const { argv } = program
  .option('d', {
    alias: 'did',
    type: 'string',
    describe: 'DID',
    required: true
  })
  .option('i', {
    alias: 'identity',
    type: 'string',
    describe: 'Identity',
    // default: rc.network.identity.whoami,
    required: true
  })

// Emit program usage help
if (0 == argv._.length && argv.help) {
  program.showHelp()
  process.exit(0)
}

// Main program entry
module.exports = (async function main() {
  info(`starting DCDN to download ${argv.did}`)

  // Check if given DID is committed to blockchain
  const exists = await checkBlockchain(argv.did)

  if (exists) {
    info(`Found ${argv.did} on blockchain, starting DCDN`)

    //TODO: clarify price per unit
    let { maxCost } = await inquirer.prompt([ {
      type: 'input',
      name: 'maxCost',
      message:
      '\nPlease enter the maximum price you are willing to pay.\n' +
      'Price:'
    } ])

    let { maxWorkers } = await inquirer.prompt([ {
      type: 'input',
      name: 'maxWorkers',
      message:
      '\nPlease enter the maximum number of publishers you want to hire.\n' +
      'Price:'
    } ])

    try {
      await startDCDN({
        did: argv.did,
        download: true,
        upload: false,
        userID: argv.identity,
        price: maxCost,
        maxWorkers: maxWorkers
      })

      attachDownloadVisualizer(getInstance())

    } catch (e) {
      error(`Error occurred while downloading ${argv.did}`, e)
      return process.exit(1)
    }
  }
  else {
    error(`${argv.did} doesn't exist on  blockchain.`)
    return process.exit(1)
  }

  // Creates a progress visualizer bar in cli
  function attachDownloadVisualizer(dcdn) {
    const pBar = new clip.Bar({}, clip.Presets.shades_classic)
    dcdn.once('start', total => pBar.start(total, 0))
    dcdn.on('progress', value => pBar.update(value))
    dcdn.once('complete', () => pBar.stop())
  }

}())
