#!/usr/bin/env node

const { start: startDCDN } = require('../')
const { createProgram } = require('../lib/program')
const { info, error } = require('ara-console')
const debug = require('debug')('ara:dcdn:download')
const toLower = x => String(x).toLowerCase()
const { contractAddress, walletAddresses} = require('../wip/constants.js')
const ContractABI = require('../wip/farming_contract/contract-abi.js')
const { Requester } = require('../wip/requester.js')
const { messages, util, matchers} = require('ara-farming-protocol')
const inquirer = require('inquirer')
const crypto = require('ara-crypto')
// yargs program command line interface instance
const program = createProgram({
  usage: `
usage: dcdn download: [-h] [--help]
                 [options]
`,
})

const { argv } = program
  .option('d', {
    alias: 'did',
    type: 'string',
    describe: 'DID'
  })

// Emit program usage help
if (0 == argv._.length && argv.help) {
  program.showHelp()
  process.exit(0)
}

// Main program entry
module.exports = (async function main() {
  info(`starting DCDN to download ${argv.did}`)

  let { maxCost } = await inquirer.prompt([ {
    type: 'input',
    name: 'maxCost',
    message:
    '\nPlease enter the maximum price you are willingly to pay.\n' +
    'Price:'
  } ])

  let { maxWorkers } = await inquirer.prompt([ {
    type: 'input',
    name: 'maxWorkers',
    message:
    '\nPlease enter the number of publishers you want to hire.\n' +
    'Price:'
  } ])

  //TODO: uncomment the codes below for develop
  // let maxCost = 10
  // let maxWorkers = 3

  const signature = "avalidsignature"
  const requesterID = new messages.AraId()
  requesterID.setDid(argv.identity)

  const requesterSig = new messages.Signature()
  requesterSig.setAraId(requesterID)
  requesterSig.setData('requesterSig')

  const sow = new messages.SOW()
  sow.setNonce(crypto.randomBytes(32))
  sow.setWorkUnit('Byte')
  sow.setRequester(requesterID)

  const wallet = new ContractABI(contractAddress, walletAddresses[2])
  const matcher = new matchers.MaxCostMatcher(maxCost, maxWorkers)
  const requester = new Requester(sow, matcher, requesterSig, wallet)

  try {
    await startDCDN({
      did: argv.did,
      download: true,
      user: requester
    })
  } catch (e) {
    error(`Error occurred while downloading ${argv.did}`, e)
    return process.exit(1)
  }
}())
