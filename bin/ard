#!/usr/bin/env node

const { error } = require('ara-console')

const debug = require('debug')('ard:cli')
const spawn = require('cross-spawn')
const rc = require('ara-runtime-configuration')()

const { kFromARDParentFlag, createProgram } = require('../lib/program')

const kOriginalProgramArguments = Object.freeze(Object.seal(Object.assign([], process.argv.slice(2))))

process.on('unhandledRejection', onFatal)
process.on('uncaughtExeption', onFatal)

// yargs program command line interface instance
const program = createProgram({
  usage: 'usage: $0 <command> [-hDV] [<args>]'
})

const { argv } = program
  .version()
  .recommendCommands()
  .command(
    'start',
    'Start DCDN in last configuration',
    // eslint-disable-next-line no-shadow
    program => program
      .usage('usage: $0 start [-hDV] [<args>]')
    , onstart
  )
  .command(
    'download',
    'Download AFS from network',
    // eslint-disable-next-line no-shadow
    program => program
      .usage('usage: $0 download [-hDV] [<args>]')
    , ondownload
  )
  .command(
    'seed',
    'Host AFS for network',
    // eslint-disable-next-line no-shadow
    program => program
      .usage('usage: $0 seed [-hDV] [<args>]')
    , onseed
  )
  .option('debug', {
    alias: 'D',
    describe: "Enable debug output (Sets 'DEBUG+=ard:*,arp*')",
  })
  .option('identity', {
    alias: 'i',
    type: 'string',
    required: true,
    default: rc.network.identity.whoami,
    describe:
  `A valid, local, and resolvable Ara identity DID
  URI of the owner of the AFS. You will be
  prompted for the associated passphrase`,
  })

// Emit program usage help
if ((0 == argv._.length && argv.help) || 0 == kOriginalProgramArguments.length) {
  program.showHelp()
  process.exit(0)
}
// if debug given, but nothing else show help and bail
if (true == argv.debug && 0 == argv._.length) {
  program.showHelp()
  process.exit(1)
}

async function onstart(arg) {
  spawnChild(arg, 'start')
}

async function ondownload(arg) {
  spawnChild(arg, 'download')
}

async function onseed(arg) {
  spawnChild(arg, 'seed')
}

function spawnChild(arg, commandName) {
  const canonicalCommandName = `ard-${commandName}`

  // Spawn child program with command line arguments given inheriting
  // this processes stdio (stdin, stdout, stderr)
  const child = spawn(
    canonicalCommandName,
    // Flags to pass to child process
    [ kFromARDParentFlag ].concat(commandName, kOriginalProgramArguments.slice(1)),
    {
      stdio: 'inherit',
      env: Object.assign({}, process.env, {
        DEBUG: String(process.env.DEBUG) + (arg.debug ? ',ard*,arp*' : '')
      }),
    }
  )

  child.on('exit', (code, signal) => {
    debug('%s exited with code %s and signal %s', code, signal)
    process.nextTick(() => process.exit(code))
  })

  // Emit child program error and exit
  child.on('error', () => {
    error(
      "An error occured when invoking '%s' command. See 'ard --help'.",
      commandName
    )
  })
}

function onFatal(err) {
  if (err) {
    error('fatal: %s', err.message)
  }
  process.exit(1)
}
