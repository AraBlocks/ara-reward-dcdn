#!/usr/bin/env node

const { exec, execSync, spawnSync } = require('child_process')

const todaysDate = execSync('date "+%Y-%m-%d"').toString().trim()
const commitMessage = `chore(): Update(CHANGELOG.md) ${todaysDate}`
const lastCommit = execSync('git rev-parse HEAD').toString().trim()
const versionType = process.argv.slice(2)[0]
const dryRun = process.argv.slice(2)[1] // Don't push to github if true

if (!versionType) {
  console.log('Please add a version type: "major", "minor", or "patch".')
  return
}

let flag = ''
switch(versionType) {
  case 'major':
    flag = '-M'
    break
  case 'minor':
    flag = '-m'
    break
  case 'patch':
    flag = '-p'
    break
  default:
    console.log('Version type _%s_ is not valid. Try "major", "minor", or "patch".', versionType)
    return
}

const envDefaults = Object.assign(process.env, { versionType,
                                                 lastCommit,
                                                 flag,
                                                 commitMessage })

function execCommand(command, errCb) {
  return new Promise((resolve, reject) => {
    exec(command, { env: envDefaults }, (err, stdout, stderr) => {
      if (err || stderr) {
        console.log(`* * * ${command} command failed.`)
        if (err) {
          console.log(`* * * err: `, err)
        } else {
          console.log(`* * * stderr: `, stderr)
        }
        if ('function' == typeof errCb) {
          errCb()
          return
        }
        return
      }
      resolve(stdout)
    })
  })
}

async function updateChangelog() {
  await execCommand(`changelog "$flag"`)
  await execCommand(`git add CHANGELOG.md && git commit -m "$commitMessage"`)
  await execCommand(`npm version "$versionType"`, exec(`git reset --hard "$lastCommit"`))
  if ( Boolean(!dryRun )) { await execCommand(`git push origin master --tags`) }
}

updateChangelog()
